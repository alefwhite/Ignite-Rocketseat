1 - Iniciamos com a criação do package.json 
    -> npm init -y ou yarn init -y

2 - Adicicionamos a biblioteca do React no projeto
    -> yarn add react ou npm i react

3 - Adicicionamos a biblioteca React Dom no projeto
    -> yarn add react-dom

4 - Criação da estrutura de pasta do projeto
    Raiz 
        -> public > index.html
        -> src > index.jsx

5 - Instalação e configuração do babel que é uma biblioteca que consegue converter nosso código para que todos os navegadores 
entendam o código jsx.
    -> yarn add @babel/core @babel/cli @babel/preset-env -D

    Após a Instalação devemos criar um arquivo na raiz chamado babel.config.js

    Incluindo o primeiro preset no arquivo de configuração
        ->  module.exports = {
                presets: ['@babel/preset-env']
            }

    Para mostrar os comandos disponiveis no babel podemos usar -> yarn babel -h

6 - Na raiz devemos criar um arquivo index.js


7 - Para converter algum arquivo do nosso projeto podemos fazer da seguinte forma
    -> yarn babel caminho_do_arquivo --out-file caminho_de_destino = pasta/nome_do_arquivo
        Ex: yarn babel src/index --out-file dist/bundle.js

8 - Instalação do preset do babel para que ele reconheça códigos do react
    -> yarn add @babel/preset-react -D

    Agora devemos incluir esse preset @babel/preset-react no babel.config
        module.exports = {
            presets: [
                '@babel/preset-env',
                '@babel/preset-react',
            ]
        }

9 - Podemos mudar a extensão do arquivo index.js para jsx 


10 - Configuração e Instalação do WEBPACK para podermos trabalhar com qualquer tipo de arquivo na nossa aplicação
    -> yarn add webpack webpack-cli -D

    Após a instalação devemos criar um arquivo na raiz chamado webpack.config.js

    Configuração do webpack
    const path = require('path')

    module.exports = {
        entry: path.resolve(__dirname, 'src', 'index.jsx'),
        output: {
            path: path.resolve(__dirname, 'src'),
            filename: 'bundle.js'
        },
        resolve: {
            extensions: ['.js', '.jsx']
        },
        module: {
            rules: [
                {
                    test: /\.jsx$/,
                    exclude: /node_modules/,
                    use: 'babel-loader'
                }
            ]
        }
    }

    -> Precisaremos também instalar o babel loader para utilizar junto com o webpack
        -> yarn add babel-loader -D


11 - Agora para testarmos o webpack junto com o babel
    -> Podemos criar uma arquivo App.jsx dentro da pasta src e colocar um simples código de retorno de um h1
    -> Depois rodar yarn babel src/index.jsx --out-file dist/bundle.js que criará uma pasta dist
    -> Depois yarn webpack


12 - Configurando a estrutura do React
    -> Dentro da pasta public temos um arquivo chamado index.html que devemos incluir o seguinte código dentro do body
        -> <div id="root"></div>
        -> <script src="../dist/bundle.js"></script>

    -> Dentro do nosso arquivo index.jsx podemos incluir o seguinte código para testarmos o react e depois rodar yarn webpack  
        import React from "react";

        import { render } from "react-dom";

        import { App } from './App';

        render(<h1>Teste</h1>, document.getElementById('root'))


    ->  No arquivo babel.config podemos setar uma configuração do preset do react que irá incluir automaticamente o import do React
        caso esquecermos de importar em nossos arquivos
            module.exports = {
                    presets: [
                        '@babel/preset-env',
                        [
                            '@babel/preset-react', 
                            {
                                runtime: 'automatic'
                            }        
                        ],
                    ]
            }   

        Para testarmos podemos remover o import do React no arquivo index.jsx e rodar yarn webpack novamente


13 - Para tratarmos uma warning do webpack que pede para que seja identificado se estamos em desenvolvimento ou produção
     então podemos incluir a seguinte propriedade no webpack.config
        mode: 'development',


14 - Intalaremos um plugin do webpack que injeta automaticamente o <script src="../dist/bundle.js"></script> no index.html 
     independente do nome do arquivo js então podemos retirar o script do html

    -> yarn add html-webpack-plugin -D

    Agora no webpack.config
        -> Importar o plugin const HtmlWebpackPlugin = require('html-webpack-plugin')
        -> Incluir nas propriedades do webpack 
            plugins: [
                new HtmlWebpackPlugin({ template: path.resolve(__dirname, 'public', 'index.html')})
            ],    
        -> Devemos rodar novamente yarn webpack que deverá criar um arquivo index.html na pasta dist
        

15 - Configuração do WEBPACK DEV SERVER para que sempre que houver uma atualização em algum arquivo ele criar automaticamente o bundle
     sem precisar ficar rodando toda hora yarn webpack
    => yarn add webpack-dev-server -D

        Agora no webpack.config setar a seguinte configuração
            devServer: {
                static: path.resolve(__dirname, 'public')
            },

        Para rodar yarn webpack serve

16 - Utilizando source maps, caso ocorra um erro em um dos nossos arquivos o source map irá mostrar o código igual ao o arquivo
     do projeto sem os código que são gerados do react

    -> Agora em nosso webpack.config em baixo de mode devemos incluir seguinte propriedade devtool: 'eval-source-map',


17 - Configurando Ambiente de desenvolvimento e produção
    ->  Devemos criar uma variavel e checar uma propriedade definada por nós para identificar qual Ambiente estamos
    
    const isDevelopment = process.env.NODE_ENV !== 'production'

    Em Mode E Devtool devemos incluir a seguinte checagem
    mode: isDevelopment ? 'development' : 'production',
    devtool: isDevelopment ? 'eval-source-map' : 'source-map',
    

    Agora devemos instalar um biblioteca para lidar com variaveis de Ambiente
    yarn add cross-env -D

    Agora no package.json devemos incluir uma objeto chamado scripts com as configurações abaixo
    "scripts": {
        "dev": "webpack serve",
        "build": "cross-env NODE_ENV=production webpack"
    }


18 - Configuração para importar arquivos css precisaremos criar uma nova regra no webpack para ele fazer a leitura de arquivos css
    -> Inslação dos loaders yarn add style-loader css-loader -D

    Na propriedade module do webpack devemos incluir a rule de css
    module: {
        rules: [
            {
                test: /\.jsx$/,
                exclude: /node_modules/,
                use: 'babel-loader'
            },
            // rule do css
            {
                test: /\.css$/,
                exclude: /node_modules/,
                use: ['style-loader', 'css-loader']
            }
        ]
    }

19 - Utilizando SASS
    -> Instalação
        yarn add node-sass -D
        yarn add sass-loader -D

     module: {
        rules: [
            {
                test: /\.jsx$/,
                exclude: /node_modules/,
                use: 'babel-loader'
            },
            // Aqui devemos apenas incluir o sass-loader e mudar o .css para .scss
            {
                test: /\.css$/,
                exclude: /node_modules/,
                use: ['style-loader', 'css-loader', 'sass-loader']
            }
        ]
    }

20 - Fast Refresh é um plugin que caso alterarmos alguma coisa em nosso código os estados do component não serão zerados
     pois se tivermos testando um fluxo e alterarmos algo no código sem o fast refresh ele irá resetar todos os estados da aplicação

     ->  yarn add -D @pmmmwh/react-refresh-webpack-plugin react-refresh
     ->  Agora devemos ir até o webpack config e setar a configuração abaixo

        const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin') -> Import do plugin

        devServer: {
            hot: true -> Incluir esse código         
        },
        
        plugins: [
            isDevelopment && new ReactRefreshWebpackPlugin() -> Incluir esse código          
        ].filter(Boolean),

        em rules mudar use para objeto e setar as config abaixo
             {
                test: /\.jsx$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        plugins: [
                            isDevelopment && require.resolve('react-refresh/babel')
                        ].filter(Boolean)
                    }
                }
            },

    
    21 - Usando o typescript no projeto

         Instalação yarn add typescript -D

         Após a instalação devemos executar o seguinte comando yarn tsc --init para criar o arquivo de configuração do typescript
         tsconfig.json

         Depois setarmos as seguintes configurações
         {
            "compilerOptions": {   
                "lib": ["dom", "dom.iterable", "esnext"], 
                "allowJs": true,
                "jsx": "react-jsx",
                "noEmit": true,
                "strict": true,                                       /* Enable all strict type-checking options. */   
                "moduleResolution": "node",
                "resolveJsonModule": true,
                "isolatedModules": true,
                "allowSyntheticDefaultImports": true,
                "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
                "skipLibCheck": true,                                 /* Skip type checking all .d.ts files. */
                "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
            },
             "include": ["src"],
              "exclude": ["node_modules", "**/*.spec.ts"]
        }

        Agora precisaremos incluir um plugin do babel para que ele reconheça códigos JavaScript
            yarn add @babel/preset-typescript -D

        Em nosso babel.config.js devemos setar o preset do typescript @babel/preset-typescript

        module.exports = {
            presets: [
                '@babel/preset-env',
                '@babel/preset-typescript',
                [
                    '@babel/preset-react', 
                    {
                        runtime: 'automatic'
                    }        
                ],
            ]
        }

        Agora no webpack.config.js devemos incluir 
        Dentro da propriedade module, resolve e entry do webpack
        entry: path.resolve(__dirname, 'src', 'index.tsx') -> Foi modificado para index.tsx

         resolve: {
            extensions: ['.js', '.jsx', 'ts','.tsx'] -> Foi acrescentado ts e tsx
         },

         module: {
            rules: [
                {
                    test: /\.(j|t)sx$/ -> Foi acrescentado (j|t)
                    exclude: /node_modules/,
                    use: {
                        loader: 'babel-loader',
                        options: {
                            plugins: [
                                isDevelopment && require.resolve('react-refresh/babel')
                            ].filter(Boolean)
                        }
                    }
                },
                {
                    test: /\.scss$/,
                    exclude: /node_modules/,
                    use: ['style-loader', 'css-loader', 'sass-loader']
                }
            ]
        }

        Agora precisaremos instalar alguns types 
            yarn add @types/react-dom -D
            yarn add @types/react -D - Talvez n precise



    22 - Instalação da extensão React Dev Tools no chrome